{"version":3,"sources":["types.ts","component/interviewTypes/InterviewTypes.tsx","component/assessment/Assessment.tsx","interviewConfiguration/createInterviewForm/AddInterviewType.tsx","constant.ts","state/state.tsx","interviewConfiguration/Configuration.tsx","component/summaries/Summaries.tsx","component/toggle/Togglable.tsx","component/interviewTypes/Form.tsx","inteview/index.tsx","interviewConfiguration/createInterviewForm/FormField.tsx","App.tsx","index.tsx","state/reducer.ts"],"names":["Title","InterviewTypes","interview","className","name","id","section","map","title","Assessment","interviews","to","AddInterviewType","apiBaseUrl","initialState","StateContext","createContext","StateProvider","reducer","children","useReducer","state","dispatch","Provider","value","useStateValue","useContext","Configuration","React","useEffect","fetchInterviewById","a","axios","get","data","type","payload","console","log","error","length","Summaries","Togglable","props","useState","visible","setVisible","hideWhenVisible","display","showWhenVisible","toggleVisibility","style","onClick","buttonLabel","SelectedInterview","onSubmit","interviewMatch","useRouteMatch","useParams","find","initialValues","Basic","score","questions","validate","values","requiredError","errors","ssn","dateOfBirth","occupation","isValid","dirty","Form","Group","htmlFor","Button","s","q","Interview","showInterview","totalScore","question","CreateInterview","App","fetchInterviewList","path","exact","component","ReactDOM","render","action","interviewId","document","getElementById"],"mappings":"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","file":"static/js/main.047f6015.chunk.js","sourcesContent":["export enum Title {\r\n  Basic = \"basic\",\r\n  Intermediate = \"intermediate\",\r\n  Advanced = \"advance\"\r\n}\r\nexport interface Section {\r\nsection: any\r\ntitle: Title;\r\nquestions: string[];\r\n}\r\n\r\nexport interface Interview {\r\n  id: string;\r\n  name: string;\r\n  totalScore: number;\r\n}\r\nexport interface Id {\r\n  id: string;\r\n}\r\nexport interface SectionInterview extends Interview {\r\nfind(arg0: (interview: any) => boolean)\r\nmap(arg0: (i: any) => any): import(\"react\").ReactNode\r\nsection: Section[];\r\n}\r\n\r\nexport interface MatchParams {\r\n  id: string;\r\n}\r\nexport interface CandidateDetails {\r\nname: string;\r\nrole: string;\r\n}\r\nexport interface QuestionAndAnswer extends Interview {\r\nquestion: string;\r\nanswer: string;\r\nscore: number\r\n}\r\n\r\nexport type NewInterview = Omit<SectionInterview, 'id'>\r\nexport type GetJustInterviewDetails = Omit<SectionInterview, 'section'>\r\nexport type CreatedInterview = Omit<SectionInterview, 'totalScore'>","import { SectionInterview } from \"../../types\";\r\nimport { BsChevronCompactRight } from \"react-icons/bs\";\r\nimport \"./interviewTypes.css\"\r\n// import CreatedInterview from \".\";\r\n\r\n\r\ninterface InterviewProps {\r\n    interview: SectionInterview\r\n}\r\nconst InterviewTypes: React.FC<InterviewProps> = ({interview}) => {\r\n\r\n    return (\r\n            <div className=\"interview\">\r\n                <div>\r\n                <strong key={interview.id}>{interview.name}</strong> \r\n                    {interview.section.map(section => {\r\n                        return  <p key={section.title}> </p>\r\n\r\n                    })}\r\n                </div>\r\n                <BsChevronCompactRight className=\"icon\"/>\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default InterviewTypes;","import { SectionInterview } from \"../../types\";\r\nimport \"../assessment/assessment.css\"\r\nimport { Link } from \"react-router-dom\";\r\nimport InterviewTypes from \"../interviewTypes/InterviewTypes\";\r\n\r\ninterface AssessmentProps {\r\n    interviews: SectionInterview[]\r\n}\r\nconst Assessment: React.FC<AssessmentProps> = ({interviews}) => {\r\n\r\n\r\n    return (\r\n        <div className=\"assessment\">\r\n            <h3 className=\"header\">Please select interview type</h3>\r\n\r\n            <div className=\"interviewContainer\">\r\n                {\r\n                    interviews.map(interview => {\r\n                        return <Link to={`/interviews/${interview.id}`}> <InterviewTypes interview={interview}/> </Link>\r\n                    })\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Assessment;","/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport { Interview, SectionInterview } from \"../../types\";\r\nimport { BsFillPlusCircleFill } from \"react-icons/bs\";\r\nimport FormField from \"./FormField\";\r\nimport { useState } from \"react\";\r\nimport React from \"react\";\r\nimport { Link, BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\n\r\ninterface AddInterviewProps {\r\n    interviews: SectionInterview[]\r\n}\r\n\r\nconst AddInterviewType: React.FC<AddInterviewProps> = ({interviews}) => {\r\n\r\n\r\n    return (\r\n        <>\r\n            <Link to=\"/createInterview\">\r\n            <div className=\"createNewInterview\">\r\n                    <strong>Add Interview type</strong> <BsFillPlusCircleFill className=\"icon\"/>\r\n                </div>\r\n            </Link>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AddInterviewType;","export const apiBaseUrl = 'http://localhost:3002/api';\r\n","/* eslint-disable @typescript-eslint/no-unused-vars */\r\n/* eslint-disable @typescript-eslint/no-unused-expressions */\r\n// import React, { createContext, useContext, useReducer } from \"react-router/node_modules/@types/react\";\r\nimport React, { createContext, useContext, useReducer } from \"react\";\r\nimport { SectionInterview } from \"../types\";\r\nimport { Action } from \"./reducer\";\r\n\r\nexport type State = {\r\n    interviews: SectionInterview[]\r\n}\r\nconst initialState: State = {\r\n    interviews: []\r\n};\r\n\r\nexport const StateContext = createContext<[State, React.Dispatch<Action>]>([\r\n    initialState, () => initialState\r\n]);\r\n\r\ntype stateProviderProps = {\r\n    reducer: React.Reducer<State, Action>;\r\n    children: React.ReactElement;\r\n}\r\n\r\nexport const StateProvider: React.FC<stateProviderProps> = ({\r\n    reducer,\r\n    children\r\n} : stateProviderProps) => {\r\n    const [state, dispatch] = useReducer(reducer, initialState);\r\n    return (\r\n        <StateContext.Provider value={[state, dispatch]}>\r\n            {children}\r\n        </StateContext.Provider>\r\n    );\r\n};\r\n\r\nexport const useStateValue = () => useContext(StateContext);","/* eslint-disable array-callback-return */\r\nimport React from \"react\"\r\nimport { Link} from \"react-router-dom\"\r\nimport { SectionInterview } from \"../types\"\r\nimport AddInterviewType from \"./createInterviewForm/AddInterviewType\"\r\nimport InterviewTypes from \"../component/interviewTypes/InterviewTypes\"\r\nimport axios from \"axios\"\r\nimport { apiBaseUrl } from \"../constant\"\r\nimport { useStateValue } from \"../state\"\r\n\r\n\r\nconst Configuration = () => {\r\nconst [{interviews}, dispatch] = useStateValue()\r\n\r\n      React.useEffect(() => {\r\n    const fetchInterviewById = async () => {\r\n      try {\r\n        const {data: interviews} = await axios.get<SectionInterview[]>(\r\n          `${apiBaseUrl}/createdInterview/:id`\r\n        );\r\n        dispatch({ type: \"GET_INTERVIEW\", payload: interviews})\r\n        console.log(interviews);\r\n      } catch (e) {        \r\n        console.error(e);\r\n      }\r\n    };\r\n    void fetchInterviewById()\r\n  }, [dispatch])\r\n\r\n    return (\r\n        <div className=\"configuration\">\r\n            <h3 className=\"header\">Interview Types {'  '} {interviews.length}</h3>\r\n\r\n            <div className=\"interviewContainer\">\r\n                {\r\n                    interviews.map(interview => {\r\n                      return <Link to={`/createdInterview/${interview.id}`}><InterviewTypes interview={interview} key={interview.id}/></Link>\r\n                    })\r\n                }\r\n\r\n            <AddInterviewType interviews={interviews}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Configuration","interface SummariesProps {\r\n\r\n}\r\nconst Summaries: React.FC<SummariesProps> = () => {\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"react\">\r\n                summary!!!!!!!!!!!!!!!!!!!!!!!!!!!!1\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Summaries","import React, { useState } from 'react'\r\n\r\nconst Togglable = (props) => {\r\n  const [visible, setVisible] = useState(false)\r\n\r\n  const hideWhenVisible = { display: visible ? 'none' : '' }\r\n  const showWhenVisible = { display: visible ? '' : 'none' }\r\n\r\n  const toggleVisibility = () => {\r\n    setVisible(!visible)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div style={hideWhenVisible}>\r\n        <button onClick={toggleVisibility}>{props.buttonLabel}</button>\r\n      </div>\r\n      <div style={showWhenVisible}>\r\n        {props.children}\r\n        <button onClick={toggleVisibility}>cancel</button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Togglable\r\n\r\n// <Togglable buttonLabel=\"new note\">\r\n//   <NoteForm\r\n//   onSubmit={addNote}\r\n//   value={newNote}\r\n//   handleChange={handleNoteChange}\r\n// />\r\n// </Togglable>","/* eslint-disable @typescript-eslint/no-use-before-define */\r\n/* eslint-disable react-hooks/rules-of-hooks */\r\n/* eslint-disable array-callback-return */\r\nimport { Field, Formik,  ErrorMessage } from \"formik\";\r\nimport React from \"react\";\r\nimport { Button, Form} from \"semantic-ui-react\";\r\nimport { Id, MatchParams, SectionInterview, Title } from \"../../types\";\r\nimport \"./form.css\"\r\nimport Togglable from \"../toggle/Togglable\";\r\nimport { useParams, useRouteMatch } from \"react-router\";\r\n\r\n\r\ninterface SectionProps {\r\n    interviews : SectionInterview[]\r\n    onSubmit: any\r\n}\r\n\r\nconst SelectedInterview: React.FC<SectionProps> = ({onSubmit, interviews}) => {\r\n\r\n\r\n  const interviewMatch = useRouteMatch<MatchParams>('/interviews/:id')\r\n  const id = useParams<Id>().id\r\n  const interview = interviewMatch ? interviews.find(interview => interview.id === id) : null \r\nconsole.log(id);\r\n\r\n\r\n  \r\n  // interviews.map(i => if (i.id === params) {\r\n    \r\n  // })\r\n    return ( \r\n        <Formik\r\n    initialValues={{\r\n    name: \"\",\r\n    title: Title.Basic,\r\n    score: \"\",\r\n    questions: [],\r\n  }}\r\n  onSubmit={onSubmit}\r\n  validate={values => {\r\n    const requiredError = \"Field is required\";\r\n    const errors: { [field: string]: string } = {};\r\n    if (!values.name) {\r\n      errors.name = requiredError;\r\n    }\r\n    if (!values.title) {\r\n      errors.ssn = requiredError;\r\n    }\r\n    if (!values.score) {\r\n      errors.dateOfBirth = requiredError;\r\n    }\r\n    if (!values.questions) {\r\n      errors.occupation = requiredError;\r\n    }\r\n    return errors;\r\n  }}\r\n  >\r\n    {({ isValid, dirty }) => {\r\nreturn (\r\n      <Form className=\"form-container\">\r\n          <h1>{interview?.name}</h1>\r\n\r\n        <Form.Group>\r\n          <label htmlFor=\"full name\">Enter Full Name</label>\r\n          <Field name=\"fullname\" type=\"text\"/>\r\n          <ErrorMessage name=\"enter name\"/>\r\n\r\n          <label htmlFor=\"email\">Enter email</label>\r\n          <Field name=\"email\" type=\"email\"/>\r\n          <ErrorMessage name=\"interviewTitle\"/>\r\n\r\n          <Button type=\"submit\">Save</Button>\r\n\r\n        </Form.Group>\r\n\r\n        <Form.Group>\r\n        {interview?.section.map(s => { \r\n            return <div className=\"question\">\r\n              <h1>{s.title}</h1>\r\n              <Togglable buttonLabel=\"open\">\r\n              {s.questions.map(q => <div className=\"label\">\r\n                <label htmlFor=\"question\">{q}</label>\r\n                <Field name=\"answer\" type=\"text\"/>\r\n                <ErrorMessage name=\"answer Question\"/>\r\n              </div>)}\r\n              </Togglable>\r\n            </div>\r\n        })}\r\n      </Form.Group>\r\n      </Form>\r\n );\r\n}}\r\n</Formik>\r\n)\r\n};\r\n\r\nexport default SelectedInterview","/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport React from \"react\";\r\nimport { Link, useParams, useRouteMatch } from \"react-router-dom\";\r\nimport { types } from \"util\";\r\nimport { useStateValue } from \"../state/state\";\r\nimport { CreatedInterview, Id, MatchParams, SectionInterview } from \"../types\";\r\nimport Part from \"./Part\";\r\n\r\ninterface CreatedInterviewProps {\r\n    interviews: SectionInterview[]\r\n}\r\nconst Interview: React.FC<CreatedInterviewProps> = ({interviews}) => {\r\n    const interviewMatch = useRouteMatch<MatchParams>('/createdInterview/:id')\r\n    const id = useParams<Id>().id\r\n    const showInterview = interviewMatch ? interviews.find(interview => interview.id === id) : null \r\n  \r\n    return (\r\n        <div>\r\n            <h1>{showInterview?.name}</h1>\r\n            {showInterview?.section.map(section => {\r\n                return <div>\r\n                <h3>{section.title}{\"  \"}Score({showInterview.totalScore})</h3>\r\n                {section.questions.map(question => {\r\n                 return<li>{question}</li>})}\r\n            </div>;\r\n}  \r\n            )}\r\n  \r\n              <Link to=\"/configuration\"><button>close</button></Link>\r\n        </div>\r\n    )\r\n}\r\nexport default Interview;","import { Field, Formik, Form, ErrorMessage } from \"formik\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Title } from \"../../types\";\r\nimport \"../createInterviewForm/addInterview.css\"\r\n\r\n\r\nconst CreateInterview = ({onSubmit}) => {\r\n  \r\n\r\n    return (\r\n      <>\r\n\r\n            <Formik\r\n        initialValues={{\r\n        name: \"\",\r\n        title: Title.Basic,\r\n        score: \"\",\r\n        questions: [],\r\n      }}\r\n      onSubmit={onSubmit}\r\n      validate={values => {\r\n        const requiredError = \"Field is required\";\r\n        const errors: { [field: string]: string } = {};\r\n        if (!values.name) {\r\n          errors.name = requiredError;\r\n        }\r\n        if (!values.title) {\r\n          errors.ssn = requiredError;\r\n        }\r\n        if (!values.score) {\r\n          errors.dateOfBirth = requiredError;\r\n        }\r\n        if (!values.questions) {\r\n          errors.occupation = requiredError;\r\n        }\r\n        return errors;\r\n      }}\r\n      >\r\n        {() => {\r\nreturn (\r\n          <Form>\r\n              <label htmlFor=\"interviewName\">Enter Interview Name</label>\r\n              <Field name=\"interviewName\" type=\"text\"/>\r\n              <ErrorMessage name=\"interviewName\"/>\r\n\r\n              <label htmlFor=\"interviewTitle\">Enter Interview Section Title</label>\r\n              <Field name=\"interviewTitle\" type=\"text\"/>\r\n              <ErrorMessage name=\"interviewTitle\"/>\r\n\r\n              <label htmlFor=\"interviewScore\">Enter Interview Name</label>\r\n              <Field name=\"interviewScore\" type=\"text\"/>\r\n              <ErrorMessage name=\"interviewScore\"/>\r\n\r\n              <label htmlFor=\"interviewQuestions\">Add a Question </label>\r\n              <Field name=\"interviewQuestions\" type=\"text\"/>\r\n              <ErrorMessage name=\"interviewQuestions\"/>\r\n\r\n              <button type=\"submit\">Save</button>\r\n          </Form>\r\n          \r\n     );\r\n    }}\r\n\r\n    </Formik>\r\n    <Link to=\"/configuration\"> <button>Cancel</button></Link>\r\n</>\r\n    )\r\n}\r\nexport default CreateInterview","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport React, { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Route, Link, Switch, Redirect, useParams } from \"react-router-dom\";\nimport './App.css';\nimport Assessment from './component/assessment/Assessment';\nimport Configuration from './interviewConfiguration/Configuration';\nimport Summaries from './component/summaries/Summaries';\nimport { Id, SectionInterview } from './types';\nimport { BsPieChart, BsReverseLayoutTextSidebarReverse, BsGear } from \"react-icons/bs\";\nimport FormField from './interviewConfiguration/createInterviewForm/FormField';\nimport SelectedInterview from './component/interviewTypes/Form';\nimport axios from 'axios';\nimport { apiBaseUrl } from './constant';\nimport { useStateValue } from './state/state';\nimport Interview from './inteview';\nimport CreateInterview from './interviewConfiguration/createInterviewForm/FormField';\n// import { useEffect } from 'react-router/node_modules/@types/react';\n\n\n\nconst App = () => {\nconst [{interviews}, dispatch] = useStateValue();\n  React.useEffect(() => {\n    const fetchInterviewList = async () => {\n      try {\n        const {data: interviews} = await axios.get<SectionInterview[]>(\n          `${apiBaseUrl}/interviews`\n        );\n        dispatch({ type: \"GET_INTERVIEW\", payload: interviews})\n        console.log(interviews);\n      } catch (e) {        \n        console.error(e);\n      }\n    };\n    void fetchInterviewList()\n  }, [dispatch])\n\n\n\n  return (\n    <div className=\"App\">\n      <div className=\"logoHeader\">Logo</div>\n    <Router>\n      <div className=\"AppContainer\">\n         <div className=\"sideNav\">\n               <div className=\"sideNav-item\"> <BsReverseLayoutTextSidebarReverse /> <Link to=\"/interviews\">Assessment</Link> </div>\n               <div className=\"sideNav-item\"> <BsPieChart/> <Link to=\"/summaries\"> Summaries</Link> </div>\n               <div className=\"sideNav-item\">  <BsGear/> <Link to=\"/configuration\">  Configuration</Link> </div>\n         </div>\n      <Switch>\n         <Route path=\"/interviews\" exact>\n            <Assessment interviews={interviews}/> \n          </Route>\n         <Route path=\"/summaries\" exact component={Summaries}>\n           <Summaries/>\n         </Route>\n         <Route path=\"/configuration\" exact>\n            <Configuration/>\n          </Route>\n          <Route path=\"/createdInterview/:id\" exact>\n           <Interview interviews={interviews}/>\n          </Route>\n          \n         <Route path=\"/interviews/:id\" >\n            <SelectedInterview onSubmit={null} interviews={interviews}/> \n          </Route>\n         <Route path=\"/createInterview\" exact>\n            <CreateInterview onSubmit={null} /> \n          </Route>\n\n    </Switch>\n         </div>\n     </Router>\n   \n    </div>\n  );\n}\n\n\n\n \n\n \n\nexport default App;\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { StateProvider } from './state/state';\nimport { reducer } from './state/reducer';\n\nReactDOM.render(\n  <StateProvider reducer={reducer}>\n    <App />\n  </StateProvider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n","/* eslint-disable array-callback-return */\r\n\r\nimport { SectionInterview } from \"../types\";\r\nimport { State } from \"./state\";\r\n\r\n\r\nexport type Action =\r\n  | {\r\n      type: \"GET_INTERVIEW\";\r\n      payload: SectionInterview[];\r\n    }\r\n  | {\r\n      type: \"GET_INTERVIEWBYID\";\r\n      payload: SectionInterview;\r\n    }\r\n  | {\r\n      type: \"ADD_INTERVIEW\";\r\n      payload: SectionInterview;\r\n    };\r\n\r\n  export const reducer = (state: State, action: Action): State => {\r\n    switch (action.type) {\r\n      case \"GET_INTERVIEW\":\r\n        return {\r\n          ...state,\r\n          interviews: [ ...action.payload]\r\n        };\r\n      case \"GET_INTERVIEWBYID\":\r\n        const interviewId = action.payload.id\r\n        let interviews = action.payload\r\n         state.interviews.map(interview => {\r\n          if (interview.id === interviewId ) {\r\n            interviews = interview;\r\n            return interviews\r\n          }\r\n        })\r\n        return {\r\n          ...state,\r\n          interviews: [ interviews ]\r\n          \r\n        }\r\n      case \"ADD_INTERVIEW\":\r\n        return {\r\n          ...state,\r\n          interviews: {\r\n            ...state.interviews, [action.payload.id]: action.payload\r\n          }\r\n        };\r\n\r\n      default:\r\n        return state\r\n    }\r\n  };"],"sourceRoot":""}